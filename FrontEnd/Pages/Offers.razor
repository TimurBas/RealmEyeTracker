@page "/offers/{itemName}/{isSelling}"
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@using FrontEnd.Models;

@if (offers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Item 1</th>
                <th>Quantity</th>
                <th>Item 2</th>
                <th>Quantity</th>
                <th>Offer By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offer in offers)
            {
                <tr>
                    @if (Config.idToItemName.ContainsKey(offer.MainItemId))
                    {
                        <td>@Config.idToItemName[offer.MainItemId]</td>

                    }
                    else
                    {
                        <td>0</td>
                    }
                    <td>@offer.SellQuantity</td>
                    @if (Config.idToItemName.ContainsKey(offer.SecondaryItemId))
                    {
                        <td>@Config.idToItemName[offer.SecondaryItemId]</td>
                    }
                    else
                    {
                        <td>0</td>
                    }
                    <td>@offer.BuyQuantity</td>
                    <td>@offer.OfferBy</td>
                </tr>
                <button @onclick="(_ => CopyToClipboard(offer))"></button>
            }
        </tbody>
    </table>
}

@code {
    [ParameterAttribute]
    public string itemName { get; set; }
    [ParameterAttribute]
    public string isSelling { get; set; }
    private List<Offer> offers;

    protected override async Task OnInitializedAsync()
    {
        if (isSelling.Equals("True"))
        {
            var response = await Http.PostAsJsonAsync("https://localhost:44330/Offer", new Request { ItemName = itemName, Selling = true });
            offers = await response.Content.ReadFromJsonAsync<List<Offer>>();
        }
        else
        {
            var response = await Http.PostAsJsonAsync("https://localhost:44330/Offer", new Request { ItemName = itemName, Selling = false });
            offers = await response.Content.ReadFromJsonAsync<List<Offer>>();

        }
    }

    private async Task CopyToClipboard(Offer offer)
    {
        var message = $"/tell {offer.OfferBy} Hi, {offer.OfferBy}! I would like to buy {offer.SellQuantity} of your ";
        if (Config.idToItemName.ContainsKey(offer.MainItemId))
        {
            message += $"{Config.idToItemName[offer.MainItemId]} for ";
        } else
        {
            message += $"could not parse first item name for ";
        }

        if (Config.idToItemName.ContainsKey(offer.SecondaryItemId))
        {
            message += $"{offer.BuyQuantity} of my {Config.idToItemName[offer.SecondaryItemId]}.";
        } else
        {
            message += $"could not parse secondary item name";
        }

        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
    }
}
