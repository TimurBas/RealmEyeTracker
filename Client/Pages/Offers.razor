@page "/offers/{itemName}/{isSelling}"
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@using Common.Models; 
@using Common.Utilities; 

@if (offers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Selling</th>
                <th>Quantity</th>
                <th>Buying</th>
                <th>Quantity</th>
                <th>Offer By</th>
                <th>Message Person</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offer in offers)
            {
            <tr>
                <td>@Definitions.GetItemNameFromItemId(offer.MainItemId)</td>
                <td>@offer.SellQuantity</td>
                <td>@Definitions.GetItemNameFromItemId(offer.SecondaryItemId)</td>
                <td>@offer.BuyQuantity</td>
                <td>@offer.OfferBy</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="(_ => CopyToClipboard(offer))">Copy to clipboard</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    [ParameterAttribute]
    public string itemName { get; set; }
    [ParameterAttribute]
    public string isSelling { get; set; }
    private List<Offer> offers;
    private readonly string baseUrl = "https://api-realmeyetracker.azurewebsites.net";
    private readonly string localHost = "https://localhost:44330";

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(async () =>
        {
            while (true)
            {
                var response = await Http.PostAsJsonAsync($"{localHost}/Offer", new Request { ItemName = itemName, Selling = bool.Parse(isSelling) });
                offers = await response.Content.ReadFromJsonAsync<List<Offer>>();

                await InvokeAsync(StateHasChanged);
                await Task.Delay(15000);
            }
        }
        );
    }

    private async Task CopyToClipboard(Offer offer)
    {
        var message = $"/tell {offer.OfferBy} Hi, {offer.OfferBy}! I would like to buy {offer.SellQuantity} of your {Definitions.GetItemNameFromItemId(offer.MainItemId)} for {offer.BuyQuantity} of my {Definitions.GetItemNameFromItemId(offer.SecondaryItemId)}.";

        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
    }
}